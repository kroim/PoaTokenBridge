// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokensBridged extends ethereum.Event {
  get params(): TokensBridged__Params {
    return new TokensBridged__Params(this);
  }
}

export class TokensBridged__Params {
  _event: TokensBridged;

  constructor(event: TokensBridged) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get messageId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class TokensBridgingInitiated extends ethereum.Event {
  get params(): TokensBridgingInitiated__Params {
    return new TokensBridgingInitiated__Params(this);
  }
}

export class TokensBridgingInitiated__Params {
  _event: TokensBridgingInitiated;

  constructor(event: TokensBridgingInitiated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get messageId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class NewTokenRegistered extends ethereum.Event {
  get params(): NewTokenRegistered__Params {
    return new NewTokenRegistered__Params(this);
  }
}

export class NewTokenRegistered__Params {
  _event: NewTokenRegistered;

  constructor(event: NewTokenRegistered) {
    this._event = event;
  }

  get foreignToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get homeToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Omnibridge extends ethereum.SmartContract {
  static bind(address: Address): Omnibridge {
    return new Omnibridge("Omnibridge", address);
  }
}
